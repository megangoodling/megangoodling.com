{"version":3,"sources":["components/Input.js","components/ListTodo.js","components/Todo.js","App.js","serviceWorker.js","index.js"],"names":["Input","state","action","addTodo","task","length","axios","post","then","res","data","props","getTodos","setState","catch","err","console","log","handleChange","e","target","value","this","type","onChange","onClick","Component","ListTodo","todos","deleteTodo","map","todo","key","_id","Todo","get","id","delete","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"sRA4CeA,E,2MAtCbC,MAAQ,CACNC,OAAQ,I,EAGVC,QAAU,WACR,IAAMC,EAAO,CAACF,OAAQ,EAAKD,MAAMC,QAE9BE,EAAKF,QAAUE,EAAKF,OAAOG,OAAS,EACrCC,IAAMC,KAAK,aAAcH,GACtBI,MAAK,SAAAC,GACDA,EAAIC,OACL,EAAKC,MAAMC,WACX,EAAKC,SAAS,CAACX,OAAQ,SAG1BY,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,MAE5BC,QAAQC,IAAI,yB,EAIhBC,aAAe,SAACC,GACd,EAAKN,SAAS,CACZX,OAAQiB,EAAEC,OAAOC,S,wEAIX,IACFnB,EAAWoB,KAAKrB,MAAhBC,OACN,OACE,6BACE,2BAAOqB,KAAK,OAAOC,SAAUF,KAAKJ,aAAcG,MAAOnB,IACvD,4BAAQuB,QAASH,KAAKnB,SAAtB,iB,GAlCYuB,aCsBLC,EAxBE,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WAGzB,OADAb,QAAQC,IAAIW,GAEV,4BAEIA,GACEA,EAAMvB,OAAS,EAEXuB,EAAME,KAAI,SAAAC,GACR,OACE,wBAAIC,IAAKD,EAAKE,IAAKR,QAAS,kBAAMI,EAAWE,EAAKE,OAAOF,EAAK7B,WAMlE,iDCiCCgC,E,2MA5CbjC,MAAQ,CACN2B,MAAO,I,EAOThB,SAAW,WACTN,IAAM6B,IAAI,cACP3B,MAAK,SAAAC,GACDA,EAAIC,MACL,EAAKG,SAAS,CACZe,MAAOnB,EAAIC,UAIhBI,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,O,EAG9Bc,WAAa,SAACO,GAEZ9B,IAAM+B,OAAN,qBAA2BD,IACxB5B,MAAK,SAAAC,GACDA,EAAIC,MACL,EAAKE,cAGRE,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,O,mFAvB5BO,KAAKV,a,+BA0BG,IACFgB,EAAUN,KAAKrB,MAAf2B,MAEN,OACE,6BACE,0CACA,kBAAC,EAAD,CAAOhB,SAAUU,KAAKV,WACtB,kBAAC,EAAD,CAAUgB,MAAOA,EAAOC,WAAYP,KAAKO,kB,GAxC9BH,aCOJY,G,MARH,WACV,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,SCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdvC,OAAM,SAAAwC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.b49d9cf4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\n\nclass Input extends Component {\n\n  state = {\n    action: \"\"\n  }\n\n  addTodo = () => {\n    const task = {action: this.state.action}\n\n    if(task.action && task.action.length > 0){\n      axios.post('/api/todos', task)\n        .then(res => {\n          if(res.data){\n            this.props.getTodos();\n            this.setState({action: \"\"})\n          }\n        })\n        .catch(err => console.log(err))\n    }else {\n      console.log('input field required')\n    }\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      action: e.target.value\n    })\n  }\n\n  render() {\n    let { action } = this.state;\n    return (\n      <div>\n        <input type=\"text\" onChange={this.handleChange} value={action} />\n        <button onClick={this.addTodo}>add todo</button>\n      </div>\n    )\n  }\n}\n\nexport default Input","import React from 'react';\n\nconst ListTodo = ({ todos, deleteTodo }) => {\n\n  console.log(todos)\n  return (\n    <ul>\n      {\n        todos &&\n          todos.length > 0 ?\n            (\n              todos.map(todo => {\n                return (\n                  <li key={todo._id} onClick={() => deleteTodo(todo._id)}>{todo.action}</li>\n                )\n              })\n            )\n            :\n            (\n              <li>No todo(s) left</li>\n            )\n      }\n    </ul>\n  )\n}\n\nexport default ListTodo","import React, {Component} from 'react';\nimport axios from 'axios';\n\nimport Input from './Input';\nimport ListTodo from './ListTodo';\n\nclass Todo extends Component {\n\n  state = {\n    todos: []\n  }\n\n  componentDidMount(){\n    this.getTodos();\n  }\n\n  getTodos = () => {\n    axios.get('/api/todos')\n      .then(res => {\n        if(res.data){\n          this.setState({\n            todos: res.data\n          })\n        }\n      })\n      .catch(err => console.log(err))\n  }\n\n  deleteTodo = (id) => {\n\n    axios.delete(`/api/todos/${id}`)\n      .then(res => {\n        if(res.data){\n          this.getTodos()\n        }\n      })\n      .catch(err => console.log(err))\n  }\n\n  render() {\n    let { todos } = this.state;\n\n    return(\n      <div>\n        <h1>My Todo(s)</h1>\n        <Input getTodos={this.getTodos}/>\n        <ListTodo todos={todos} deleteTodo={this.deleteTodo}/>\n      </div>\n    )\n  }\n}\n\nexport default Todo;","import React from 'react';\n\nimport Todo from './components/Todo';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Todo />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}